import * as vscode from "vscode";

import { Configuration } from "./src/configuration/configuration";
import { organizeTypes } from "./src/helpers/code-helper";

// #region Functions (3)

export function activate(context: vscode.ExtensionContext)
{
    context.subscriptions.push(vscode.commands.registerCommand('tsco.organize', () => organize(vscode.window.activeTextEditor, configuration)));
    context.subscriptions.push(vscode.commands.registerCommand('tsco.organizeAll', () => organizeAll(configuration)));

    vscode.workspace.onDidChangeConfiguration(e => configuration = Configuration.getConfiguration())

    vscode.workspace.onWillSaveTextDocument(e =>
    {
        if (e.reason === vscode.TextDocumentSaveReason.Manual &&
            e.document.fileName == vscode.window.activeTextEditor?.document?.fileName &&
            configuration.organizeOnSave)
        {
            organize(vscode.window.activeTextEditor, Configuration.getConfiguration());
        }
    });
}

function organize(editor: vscode.TextEditor | undefined, configuration: Configuration)
{
    const ignoreComment1Regex = new RegExp("//\\s*tsco:ignore");
    const ignoreComment2Regex = new RegExp("//\\s*<auto-generated\\s*/>");

    if (editor)
    {
        const sourceCode = editor.document.getText();

        if (!ignoreComment1Regex.test(sourceCode) &&
            !ignoreComment2Regex.test(sourceCode))
        {
            const organizedSourceCode = organizeTypes(sourceCode, editor.document.fileName, configuration);

            if (organizedSourceCode !== sourceCode)
            {
                const start = new vscode.Position(0, 0);
                const end = new vscode.Position(editor.document.lineCount, editor.document.lineAt(editor.document.lineCount - 1).text.length);
                const range = new vscode.Range(start, end);
                const edit = new vscode.WorkspaceEdit();

                edit.replace(editor.document.uri, range, organizedSourceCode);

                return vscode.workspace.applyEdit(edit);
            }
        }
    }
}

function organizeAll(configuration: Configuration)
{
    vscode.workspace.findFiles("**/*.ts", "**/node_modules/**")
        .then(typescriptFiles => typescriptFiles.forEach(typescriptFile => vscode.workspace.openTextDocument(typescriptFile)
            .then(document => vscode.window.showTextDocument(document)
                .then(editor => organize(editor, configuration) !== null))));
}

// #endregion Functions (3)

// #region Variables (1)

let configuration = Configuration.getConfiguration();

// #endregion Variables (1)
